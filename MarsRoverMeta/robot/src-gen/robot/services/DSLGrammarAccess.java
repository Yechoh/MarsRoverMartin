/*
 * generated by Xtext 2.10.0
 */
package robot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RobotBehavior");
		private final Assignment cBehaviorlistAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBehaviorlistBehaviorsParserRuleCall_0 = (RuleCall)cBehaviorlistAssignment.eContents().get(0);
		
		//RobotBehavior:
		//	behaviorlist+=Behaviors+;
		@Override public ParserRule getRule() { return rule; }
		
		//behaviorlist+=Behaviors+
		public Assignment getBehaviorlistAssignment() { return cBehaviorlistAssignment; }
		
		//Behaviors
		public RuleCall getBehaviorlistBehaviorsParserRuleCall_0() { return cBehaviorlistBehaviorsParserRuleCall_0; }
	}
	public class BehaviorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Behaviors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorExpressionExpressionParserRuleCall_3_0 = (RuleCall)cSensorExpressionAssignment_3.eContents().get(0);
		private final Keyword cTHENKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionlistAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionlistActionsParserRuleCall_5_0 = (RuleCall)cActionlistAssignment_5.eContents().get(0);
		private final Keyword cENDKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Behaviors:
		//	"Behavior" name=ID
		//	"IF" sensorExpression=Expression
		//	"THEN" actionlist+=Actions+
		//	"END";
		@Override public ParserRule getRule() { return rule; }
		
		//"Behavior" name=ID "IF" sensorExpression=Expression "THEN" actionlist+=Actions+ "END"
		public Group getGroup() { return cGroup; }
		
		//"Behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"IF"
		public Keyword getIFKeyword_2() { return cIFKeyword_2; }
		
		//sensorExpression=Expression
		public Assignment getSensorExpressionAssignment_3() { return cSensorExpressionAssignment_3; }
		
		//Expression
		public RuleCall getSensorExpressionExpressionParserRuleCall_3_0() { return cSensorExpressionExpressionParserRuleCall_3_0; }
		
		//"THEN"
		public Keyword getTHENKeyword_4() { return cTHENKeyword_4; }
		
		//actionlist+=Actions+
		public Assignment getActionlistAssignment_5() { return cActionlistAssignment_5; }
		
		//Actions
		public RuleCall getActionlistActionsParserRuleCall_5_0() { return cActionlistActionsParserRuleCall_5_0; }
		
		//"END"
		public Keyword getENDKeyword_6() { return cENDKeyword_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression");
		private final RuleCall cExpression1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Expression1;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression1
		public RuleCall getExpression1ParserRuleCall() { return cExpression1ParserRuleCall; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftMovementActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightMovementActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRotateMovementActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Actions:
		//	LeftMovementAction | RightMovementAction | RotateMovementAction;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftMovementAction | RightMovementAction | RotateMovementAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftMovementAction
		public RuleCall getLeftMovementActionParserRuleCall_0() { return cLeftMovementActionParserRuleCall_0; }
		
		//RightMovementAction
		public RuleCall getRightMovementActionParserRuleCall_1() { return cRightMovementActionParserRuleCall_1; }
		
		//RotateMovementAction
		public RuleCall getRotateMovementActionParserRuleCall_2() { return cRotateMovementActionParserRuleCall_2; }
	}
	public class LeftMovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.LeftMovementAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftmoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftmoveMovementActionParserRuleCall_1_0 = (RuleCall)cLeftmoveAssignment_1.eContents().get(0);
		
		//LeftMovementAction:
		//	"leftMotor" leftmove=MovementAction;
		@Override public ParserRule getRule() { return rule; }
		
		//"leftMotor" leftmove=MovementAction
		public Group getGroup() { return cGroup; }
		
		//"leftMotor"
		public Keyword getLeftMotorKeyword_0() { return cLeftMotorKeyword_0; }
		
		//leftmove=MovementAction
		public Assignment getLeftmoveAssignment_1() { return cLeftmoveAssignment_1; }
		
		//MovementAction
		public RuleCall getLeftmoveMovementActionParserRuleCall_1_0() { return cLeftmoveMovementActionParserRuleCall_1_0; }
	}
	public class RightMovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RightMovementAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightmoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightmoveMovementActionParserRuleCall_1_0 = (RuleCall)cRightmoveAssignment_1.eContents().get(0);
		
		//RightMovementAction:
		//	"rightMotor" rightmove=MovementAction;
		@Override public ParserRule getRule() { return rule; }
		
		//"rightMotor" rightmove=MovementAction
		public Group getGroup() { return cGroup; }
		
		//"rightMotor"
		public Keyword getRightMotorKeyword_0() { return cRightMotorKeyword_0; }
		
		//rightmove=MovementAction
		public Assignment getRightmoveAssignment_1() { return cRightmoveAssignment_1; }
		
		//MovementAction
		public RuleCall getRightmoveMovementActionParserRuleCall_1_0() { return cRightmoveMovementActionParserRuleCall_1_0; }
	}
	public class RotateMovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RotateMovementAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRotateleftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRotateleftINTTerminalRuleCall_1_0 = (RuleCall)cRotateleftAssignment_1.eContents().get(0);
		private final Assignment cLeftdirAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftdirRotateEnumEnumRuleCall_2_0 = (RuleCall)cLeftdirAssignment_2.eContents().get(0);
		private final Assignment cRotaterightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRotaterightINTTerminalRuleCall_3_0 = (RuleCall)cRotaterightAssignment_3.eContents().get(0);
		private final Assignment cRightdirAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightdirRotateEnumEnumRuleCall_4_0 = (RuleCall)cRightdirAssignment_4.eContents().get(0);
		
		//RotateMovementAction:
		//	"rotate" rotateleft=INT leftdir=RotateEnum rotateright=INT rightdir=RotateEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"rotate" rotateleft=INT leftdir=RotateEnum rotateright=INT rightdir=RotateEnum
		public Group getGroup() { return cGroup; }
		
		//"rotate"
		public Keyword getRotateKeyword_0() { return cRotateKeyword_0; }
		
		//rotateleft=INT
		public Assignment getRotateleftAssignment_1() { return cRotateleftAssignment_1; }
		
		//INT
		public RuleCall getRotateleftINTTerminalRuleCall_1_0() { return cRotateleftINTTerminalRuleCall_1_0; }
		
		//leftdir=RotateEnum
		public Assignment getLeftdirAssignment_2() { return cLeftdirAssignment_2; }
		
		//RotateEnum
		public RuleCall getLeftdirRotateEnumEnumRuleCall_2_0() { return cLeftdirRotateEnumEnumRuleCall_2_0; }
		
		//rotateright=INT
		public Assignment getRotaterightAssignment_3() { return cRotaterightAssignment_3; }
		
		//INT
		public RuleCall getRotaterightINTTerminalRuleCall_3_0() { return cRotaterightINTTerminalRuleCall_3_0; }
		
		//rightdir=RotateEnum
		public Assignment getRightdirAssignment_4() { return cRightdirAssignment_4; }
		
		//RotateEnum
		public RuleCall getRightdirRotateEnumEnumRuleCall_4_0() { return cRightdirRotateEnumEnumRuleCall_4_0; }
	}
	public class MovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.MovementAction");
		private final Assignment cActionenumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionenumActionEnumEnumRuleCall_0 = (RuleCall)cActionenumAssignment.eContents().get(0);
		
		//MovementAction:
		//	actionenum=ActionEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//actionenum=ActionEnum
		public Assignment getActionenumAssignment() { return cActionenumAssignment; }
		
		//ActionEnum
		public RuleCall getActionenumActionEnumEnumRuleCall_0() { return cActionenumActionEnumEnumRuleCall_0; }
	}
	public class Expression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDexpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1 Expression:
		//	Expression2 ({ANDexpression.left=current} "AND" right=Expression2)*
		@Override public ParserRule getRule() { return rule; }
		
		//Expression2 ({ANDexpression.left=current} "AND" right=Expression2)*
		public Group getGroup() { return cGroup; }
		
		//Expression2
		public RuleCall getExpression2ParserRuleCall_0() { return cExpression2ParserRuleCall_0; }
		
		//({ANDexpression.left=current} "AND" right=Expression2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ANDexpression.left=current}
		public Action getANDexpressionLeftAction_1_0() { return cANDexpressionLeftAction_1_0; }
		
		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Expression2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression2
		public RuleCall getRightExpression2ParserRuleCall_1_2_0() { return cRightExpression2ParserRuleCall_1_2_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cORexpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression2 Expression:
		//	Expression3 ({ORexpression.left=current} "OR" right=Expression3)*
		@Override public ParserRule getRule() { return rule; }
		
		//Expression3 ({ORexpression.left=current} "OR" right=Expression3)*
		public Group getGroup() { return cGroup; }
		
		//Expression3
		public RuleCall getExpression3ParserRuleCall_0() { return cExpression3ParserRuleCall_0; }
		
		//({ORexpression.left=current} "OR" right=Expression3)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ORexpression.left=current}
		public Action getORexpressionLeftAction_1_0() { return cORexpressionLeftAction_1_0; }
		
		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=Expression3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression3
		public RuleCall getRightExpression3ParserRuleCall_1_2_0() { return cRightExpression3ParserRuleCall_1_2_0; }
	}
	public class Expression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTouchLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDistanceLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression3 Expression:
		//	ExpressionBracket | TouchLiteral | ColorLiteral | DistanceLiteral
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket | TouchLiteral | ColorLiteral | DistanceLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//TouchLiteral
		public RuleCall getTouchLiteralParserRuleCall_1() { return cTouchLiteralParserRuleCall_1; }
		
		//ColorLiteral
		public RuleCall getColorLiteralParserRuleCall_2() { return cColorLiteralParserRuleCall_2; }
		
		//DistanceLiteral
		public RuleCall getDistanceLiteralParserRuleCall_3() { return cDistanceLiteralParserRuleCall_3; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//	'(' exp=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class TouchLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.TouchLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTouchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTouchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTouchTouchEnumEnumRuleCall_1_0 = (RuleCall)cTouchAssignment_1.eContents().get(0);
		
		//TouchLiteral:
		//	"touch:" touch=TouchEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"touch:" touch=TouchEnum
		public Group getGroup() { return cGroup; }
		
		//"touch:"
		public Keyword getTouchKeyword_0() { return cTouchKeyword_0; }
		
		//touch=TouchEnum
		public Assignment getTouchAssignment_1() { return cTouchAssignment_1; }
		
		//TouchEnum
		public RuleCall getTouchTouchEnumEnumRuleCall_1_0() { return cTouchTouchEnumEnumRuleCall_1_0; }
	}
	public class ColorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ColorLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorEnumEnumRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		
		//ColorLiteral:
		//	"color:" color=ColorEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"color:" color=ColorEnum
		public Group getGroup() { return cGroup; }
		
		//"color:"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//color=ColorEnum
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_1_0() { return cColorColorEnumEnumRuleCall_1_0; }
	}
	public class DistanceLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.DistanceLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSonarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceINTTerminalRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//DistanceLiteral:
		//	"sonar:" distance=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"sonar:" distance=INT
		public Group getGroup() { return cGroup; }
		
		//"sonar:"
		public Keyword getSonarKeyword_0() { return cSonarKeyword_0; }
		
		//distance=INT
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_1_0() { return cDistanceINTTerminalRuleCall_1_0; }
	}
	
	public class RotateEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RotateEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORWARDForwardKeyword_0_0 = (Keyword)cFORWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBACKWARDBackwardKeyword_1_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RotateEnum:
		//	FORWARD='forward' |
		//	BACKWARD='backward';
		public EnumRule getRule() { return rule; }
		
		//FORWARD='forward' | BACKWARD='backward'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD='forward'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_0() { return cFORWARDEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getFORWARDForwardKeyword_0_0() { return cFORWARDForwardKeyword_0_0; }
		
		//BACKWARD='backward'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_1() { return cBACKWARDEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBACKWARDBackwardKeyword_1_0() { return cBACKWARDBackwardKeyword_1_0; }
	}
	public class ActionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ActionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORWARDForwardKeyword_0_0 = (Keyword)cFORWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBACKWARDBackwardKeyword_1_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTOPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTOPStopKeyword_2_0 = (Keyword)cSTOPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ActionEnum:
		//	FORWARD='forward' |
		//	BACKWARD='backward' |
		//	STOP='stop';
		public EnumRule getRule() { return rule; }
		
		//FORWARD='forward' | BACKWARD='backward' | STOP='stop'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD='forward'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_0() { return cFORWARDEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getFORWARDForwardKeyword_0_0() { return cFORWARDForwardKeyword_0_0; }
		
		//BACKWARD='backward'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_1() { return cBACKWARDEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBACKWARDBackwardKeyword_1_0() { return cBACKWARDBackwardKeyword_1_0; }
		
		//STOP='stop'
		public EnumLiteralDeclaration getSTOPEnumLiteralDeclaration_2() { return cSTOPEnumLiteralDeclaration_2; }
		
		//'stop'
		public Keyword getSTOPStopKeyword_2_0() { return cSTOPStopKeyword_2_0; }
	}
	public class TouchEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.TouchEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTTouchLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTTouchRightKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TouchEnum:
		//	LEFT='touchLeft' | RIGHT='touchRight';
		public EnumRule getRule() { return rule; }
		
		//LEFT='touchLeft' | RIGHT='touchRight'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT='touchLeft'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//'touchLeft'
		public Keyword getLEFTTouchLeftKeyword_0_0() { return cLEFTTouchLeftKeyword_0_0; }
		
		//RIGHT='touchRight'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }
		
		//'touchRight'
		public Keyword getRIGHTTouchRightKeyword_1_0() { return cRIGHTTouchRightKeyword_1_0; }
	}
	public class ColorEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ColorEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLACKBLACKKeyword_1_0 = (Keyword)cBLACKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBLUEKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREENGREENKeyword_3_0 = (Keyword)cGREENEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cYELLOWYELLOWKeyword_4_0 = (Keyword)cYELLOWEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cREDREDKeyword_5_0 = (Keyword)cREDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWHITEWHITEKeyword_6_0 = (Keyword)cWHITEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBROWNEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBROWNBROWNKeyword_7_0 = (Keyword)cBROWNEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ColorEnum:
		//	NONE |
		//	BLACK |
		//	BLUE |
		//	GREEN |
		//	YELLOW |
		//	RED |
		//	WHITE |
		//	BROWN;
		public EnumRule getRule() { return rule; }
		
		//NONE | BLACK | BLUE | GREEN | YELLOW | RED | WHITE | BROWN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//BLACK
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_1() { return cBLACKEnumLiteralDeclaration_1; }
		
		//'BLACK'
		public Keyword getBLACKBLACKKeyword_1_0() { return cBLACKBLACKKeyword_1_0; }
		
		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }
		
		//'BLUE'
		public Keyword getBLUEBLUEKeyword_2_0() { return cBLUEBLUEKeyword_2_0; }
		
		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_3() { return cGREENEnumLiteralDeclaration_3; }
		
		//'GREEN'
		public Keyword getGREENGREENKeyword_3_0() { return cGREENGREENKeyword_3_0; }
		
		//YELLOW
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_4() { return cYELLOWEnumLiteralDeclaration_4; }
		
		//'YELLOW'
		public Keyword getYELLOWYELLOWKeyword_4_0() { return cYELLOWYELLOWKeyword_4_0; }
		
		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_5() { return cREDEnumLiteralDeclaration_5; }
		
		//'RED'
		public Keyword getREDREDKeyword_5_0() { return cREDREDKeyword_5_0; }
		
		//WHITE
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_6() { return cWHITEEnumLiteralDeclaration_6; }
		
		//'WHITE'
		public Keyword getWHITEWHITEKeyword_6_0() { return cWHITEWHITEKeyword_6_0; }
		
		//BROWN
		public EnumLiteralDeclaration getBROWNEnumLiteralDeclaration_7() { return cBROWNEnumLiteralDeclaration_7; }
		
		//'BROWN'
		public Keyword getBROWNBROWNKeyword_7_0() { return cBROWNBROWNKeyword_7_0; }
	}
	
	private final RobotBehaviorElements pRobotBehavior;
	private final BehaviorsElements pBehaviors;
	private final ExpressionElements pExpression;
	private final ActionsElements pActions;
	private final LeftMovementActionElements pLeftMovementAction;
	private final RightMovementActionElements pRightMovementAction;
	private final RotateMovementActionElements pRotateMovementAction;
	private final RotateEnumElements eRotateEnum;
	private final MovementActionElements pMovementAction;
	private final ActionEnumElements eActionEnum;
	private final Expression1Elements pExpression1;
	private final Expression2Elements pExpression2;
	private final Expression3Elements pExpression3;
	private final ExpressionBracketElements pExpressionBracket;
	private final TouchLiteralElements pTouchLiteral;
	private final ColorLiteralElements pColorLiteral;
	private final DistanceLiteralElements pDistanceLiteral;
	private final TouchEnumElements eTouchEnum;
	private final ColorEnumElements eColorEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobotBehavior = new RobotBehaviorElements();
		this.pBehaviors = new BehaviorsElements();
		this.pExpression = new ExpressionElements();
		this.pActions = new ActionsElements();
		this.pLeftMovementAction = new LeftMovementActionElements();
		this.pRightMovementAction = new RightMovementActionElements();
		this.pRotateMovementAction = new RotateMovementActionElements();
		this.eRotateEnum = new RotateEnumElements();
		this.pMovementAction = new MovementActionElements();
		this.eActionEnum = new ActionEnumElements();
		this.pExpression1 = new Expression1Elements();
		this.pExpression2 = new Expression2Elements();
		this.pExpression3 = new Expression3Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pTouchLiteral = new TouchLiteralElements();
		this.pColorLiteral = new ColorLiteralElements();
		this.pDistanceLiteral = new DistanceLiteralElements();
		this.eTouchEnum = new TouchEnumElements();
		this.eColorEnum = new ColorEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robot.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RobotBehavior:
	//	behaviorlist+=Behaviors+;
	public RobotBehaviorElements getRobotBehaviorAccess() {
		return pRobotBehavior;
	}
	
	public ParserRule getRobotBehaviorRule() {
		return getRobotBehaviorAccess().getRule();
	}
	
	//Behaviors:
	//	"Behavior" name=ID
	//	"IF" sensorExpression=Expression
	//	"THEN" actionlist+=Actions+
	//	"END";
	public BehaviorsElements getBehaviorsAccess() {
		return pBehaviors;
	}
	
	public ParserRule getBehaviorsRule() {
		return getBehaviorsAccess().getRule();
	}
	
	//Expression:
	//	Expression1;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Actions:
	//	LeftMovementAction | RightMovementAction | RotateMovementAction;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//LeftMovementAction:
	//	"leftMotor" leftmove=MovementAction;
	public LeftMovementActionElements getLeftMovementActionAccess() {
		return pLeftMovementAction;
	}
	
	public ParserRule getLeftMovementActionRule() {
		return getLeftMovementActionAccess().getRule();
	}
	
	//RightMovementAction:
	//	"rightMotor" rightmove=MovementAction;
	public RightMovementActionElements getRightMovementActionAccess() {
		return pRightMovementAction;
	}
	
	public ParserRule getRightMovementActionRule() {
		return getRightMovementActionAccess().getRule();
	}
	
	//RotateMovementAction:
	//	"rotate" rotateleft=INT leftdir=RotateEnum rotateright=INT rightdir=RotateEnum;
	public RotateMovementActionElements getRotateMovementActionAccess() {
		return pRotateMovementAction;
	}
	
	public ParserRule getRotateMovementActionRule() {
		return getRotateMovementActionAccess().getRule();
	}
	
	//enum RotateEnum:
	//	FORWARD='forward' |
	//	BACKWARD='backward';
	public RotateEnumElements getRotateEnumAccess() {
		return eRotateEnum;
	}
	
	public EnumRule getRotateEnumRule() {
		return getRotateEnumAccess().getRule();
	}
	
	//MovementAction:
	//	actionenum=ActionEnum;
	public MovementActionElements getMovementActionAccess() {
		return pMovementAction;
	}
	
	public ParserRule getMovementActionRule() {
		return getMovementActionAccess().getRule();
	}
	
	//enum ActionEnum:
	//	FORWARD='forward' |
	//	BACKWARD='backward' |
	//	STOP='stop';
	public ActionEnumElements getActionEnumAccess() {
		return eActionEnum;
	}
	
	public EnumRule getActionEnumRule() {
		return getActionEnumAccess().getRule();
	}
	
	//Expression1 Expression:
	//	Expression2 ({ANDexpression.left=current} "AND" right=Expression2)*
	public Expression1Elements getExpression1Access() {
		return pExpression1;
	}
	
	public ParserRule getExpression1Rule() {
		return getExpression1Access().getRule();
	}
	
	//Expression2 Expression:
	//	Expression3 ({ORexpression.left=current} "OR" right=Expression3)*
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//Expression3 Expression:
	//	ExpressionBracket | TouchLiteral | ColorLiteral | DistanceLiteral
	public Expression3Elements getExpression3Access() {
		return pExpression3;
	}
	
	public ParserRule getExpression3Rule() {
		return getExpression3Access().getRule();
	}
	
	//ExpressionBracket:
	//	'(' exp=Expression ')';
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//TouchLiteral:
	//	"touch:" touch=TouchEnum;
	public TouchLiteralElements getTouchLiteralAccess() {
		return pTouchLiteral;
	}
	
	public ParserRule getTouchLiteralRule() {
		return getTouchLiteralAccess().getRule();
	}
	
	//ColorLiteral:
	//	"color:" color=ColorEnum;
	public ColorLiteralElements getColorLiteralAccess() {
		return pColorLiteral;
	}
	
	public ParserRule getColorLiteralRule() {
		return getColorLiteralAccess().getRule();
	}
	
	//DistanceLiteral:
	//	"sonar:" distance=INT;
	public DistanceLiteralElements getDistanceLiteralAccess() {
		return pDistanceLiteral;
	}
	
	public ParserRule getDistanceLiteralRule() {
		return getDistanceLiteralAccess().getRule();
	}
	
	//enum TouchEnum:
	//	LEFT='touchLeft' | RIGHT='touchRight';
	public TouchEnumElements getTouchEnumAccess() {
		return eTouchEnum;
	}
	
	public EnumRule getTouchEnumRule() {
		return getTouchEnumAccess().getRule();
	}
	
	//enum ColorEnum:
	//	NONE |
	//	BLACK |
	//	BLUE |
	//	GREEN |
	//	YELLOW |
	//	RED |
	//	WHITE |
	//	BROWN;
	public ColorEnumElements getColorEnumAccess() {
		return eColorEnum;
	}
	
	public EnumRule getColorEnumRule() {
		return getColorEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
