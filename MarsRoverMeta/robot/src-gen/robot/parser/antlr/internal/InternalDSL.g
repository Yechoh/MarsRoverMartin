/*
 * generated by Xtext 2.10.0
 */
grammar InternalDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package robot.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package robot.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import robot.services.DSLGrammarAccess;

}

@parser::members {

 	private DSLGrammarAccess grammarAccess;

    public InternalDSLParser(TokenStream input, DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RobotBehavior";
   	}

   	@Override
   	protected DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobotBehavior
entryRuleRobotBehavior returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotBehaviorRule()); }
	iv_ruleRobotBehavior=ruleRobotBehavior
	{ $current=$iv_ruleRobotBehavior.current; }
	EOF;

// Rule RobotBehavior
ruleRobotBehavior returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRobotBehaviorAccess().getBehaviorlistBehaviorsParserRuleCall_0());
			}
			lv_behaviorlist_0_0=ruleBehaviors
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRobotBehaviorRule());
				}
				add(
					$current,
					"behaviorlist",
					lv_behaviorlist_0_0,
					"robot.DSL.Behaviors");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleBehaviors
entryRuleBehaviors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorsRule()); }
	iv_ruleBehaviors=ruleBehaviors
	{ $current=$iv_ruleBehaviors.current; }
	EOF;

// Rule Behaviors
ruleBehaviors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Behavior'
		{
			newLeafNode(otherlv_0, grammarAccess.getBehaviorsAccess().getBehaviorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBehaviorsAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorsRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='IF'
		{
			newLeafNode(otherlv_2, grammarAccess.getBehaviorsAccess().getIFKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorsAccess().getSensorExpressionExpressionParserRuleCall_3_0());
				}
				lv_sensorExpression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorsRule());
					}
					set(
						$current,
						"sensorExpression",
						lv_sensorExpression_3_0,
						"robot.DSL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='THEN'
		{
			newLeafNode(otherlv_4, grammarAccess.getBehaviorsAccess().getTHENKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorsAccess().getActionlistActionsParserRuleCall_5_0());
				}
				lv_actionlist_5_0=ruleActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorsRule());
					}
					add(
						$current,
						"actionlist",
						lv_actionlist_5_0,
						"robot.DSL.Actions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='END'
		{
			newLeafNode(otherlv_6, grammarAccess.getBehaviorsAccess().getENDKeyword_6());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getExpression1ParserRuleCall());
	}
	this_Expression1_0=ruleExpression1
	{
		$current = $this_Expression1_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleActions
entryRuleActions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionsRule()); }
	iv_ruleActions=ruleActions
	{ $current=$iv_ruleActions.current; }
	EOF;

// Rule Actions
ruleActions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionsAccess().getLeftMovementActionParserRuleCall_0());
		}
		this_LeftMovementAction_0=ruleLeftMovementAction
		{
			$current = $this_LeftMovementAction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionsAccess().getRightMovementActionParserRuleCall_1());
		}
		this_RightMovementAction_1=ruleRightMovementAction
		{
			$current = $this_RightMovementAction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionsAccess().getRotateMovementActionParserRuleCall_2());
		}
		this_RotateMovementAction_2=ruleRotateMovementAction
		{
			$current = $this_RotateMovementAction_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLeftMovementAction
entryRuleLeftMovementAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftMovementActionRule()); }
	iv_ruleLeftMovementAction=ruleLeftMovementAction
	{ $current=$iv_ruleLeftMovementAction.current; }
	EOF;

// Rule LeftMovementAction
ruleLeftMovementAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='leftMotor'
		{
			newLeafNode(otherlv_0, grammarAccess.getLeftMovementActionAccess().getLeftMotorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftMovementActionAccess().getLeftmoveMovementActionParserRuleCall_1_0());
				}
				lv_leftmove_1_0=ruleMovementAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftMovementActionRule());
					}
					set(
						$current,
						"leftmove",
						lv_leftmove_1_0,
						"robot.DSL.MovementAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRightMovementAction
entryRuleRightMovementAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightMovementActionRule()); }
	iv_ruleRightMovementAction=ruleRightMovementAction
	{ $current=$iv_ruleRightMovementAction.current; }
	EOF;

// Rule RightMovementAction
ruleRightMovementAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rightMotor'
		{
			newLeafNode(otherlv_0, grammarAccess.getRightMovementActionAccess().getRightMotorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRightMovementActionAccess().getRightmoveMovementActionParserRuleCall_1_0());
				}
				lv_rightmove_1_0=ruleMovementAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRightMovementActionRule());
					}
					set(
						$current,
						"rightmove",
						lv_rightmove_1_0,
						"robot.DSL.MovementAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRotateMovementAction
entryRuleRotateMovementAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateMovementActionRule()); }
	iv_ruleRotateMovementAction=ruleRotateMovementAction
	{ $current=$iv_ruleRotateMovementAction.current; }
	EOF;

// Rule RotateMovementAction
ruleRotateMovementAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rotate'
		{
			newLeafNode(otherlv_0, grammarAccess.getRotateMovementActionAccess().getRotateKeyword_0());
		}
		(
			(
				lv_rotateleft_1_0=RULE_INT
				{
					newLeafNode(lv_rotateleft_1_0, grammarAccess.getRotateMovementActionAccess().getRotateleftINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateMovementActionRule());
					}
					setWithLastConsumed(
						$current,
						"rotateleft",
						lv_rotateleft_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateMovementActionAccess().getLeftdirRotateEnumEnumRuleCall_2_0());
				}
				lv_leftdir_2_0=ruleRotateEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateMovementActionRule());
					}
					set(
						$current,
						"leftdir",
						lv_leftdir_2_0,
						"robot.DSL.RotateEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_rotateright_3_0=RULE_INT
				{
					newLeafNode(lv_rotateright_3_0, grammarAccess.getRotateMovementActionAccess().getRotaterightINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateMovementActionRule());
					}
					setWithLastConsumed(
						$current,
						"rotateright",
						lv_rotateright_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateMovementActionAccess().getRightdirRotateEnumEnumRuleCall_4_0());
				}
				lv_rightdir_4_0=ruleRotateEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateMovementActionRule());
					}
					set(
						$current,
						"rightdir",
						lv_rightdir_4_0,
						"robot.DSL.RotateEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMovementAction
entryRuleMovementAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMovementActionRule()); }
	iv_ruleMovementAction=ruleMovementAction
	{ $current=$iv_ruleMovementAction.current; }
	EOF;

// Rule MovementAction
ruleMovementAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMovementActionAccess().getActionenumActionEnumEnumRuleCall_0());
			}
			lv_actionenum_0_0=ruleActionEnum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMovementActionRule());
				}
				set(
					$current,
					"actionenum",
					lv_actionenum_0_0,
					"robot.DSL.ActionEnum");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExpression1
entryRuleExpression1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression1Rule()); }
	iv_ruleExpression1=ruleExpression1
	{ $current=$iv_ruleExpression1.current; }
	EOF;

// Rule Expression1
ruleExpression1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression1Access().getExpression2ParserRuleCall_0());
		}
		this_Expression2_0=ruleExpression2
		{
			$current = $this_Expression2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression1Access().getANDexpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='AND'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression1Access().getANDKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression1Access().getRightExpression2ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression1Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"robot.DSL.Expression2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression2
entryRuleExpression2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression2Rule()); }
	iv_ruleExpression2=ruleExpression2
	{ $current=$iv_ruleExpression2.current; }
	EOF;

// Rule Expression2
ruleExpression2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression2Access().getExpression3ParserRuleCall_0());
		}
		this_Expression3_0=ruleExpression3
		{
			$current = $this_Expression3_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression2Access().getORexpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='OR'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpression2Access().getORKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression2Access().getRightExpression3ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression3
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression2Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"robot.DSL.Expression3");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression3
entryRuleExpression3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression3Rule()); }
	iv_ruleExpression3=ruleExpression3
	{ $current=$iv_ruleExpression3.current; }
	EOF;

// Rule Expression3
ruleExpression3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression3Access().getExpressionBracketParserRuleCall_0());
		}
		this_ExpressionBracket_0=ruleExpressionBracket
		{
			$current = $this_ExpressionBracket_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpression3Access().getTouchLiteralParserRuleCall_1());
		}
		this_TouchLiteral_1=ruleTouchLiteral
		{
			$current = $this_TouchLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpression3Access().getColorLiteralParserRuleCall_2());
		}
		this_ColorLiteral_2=ruleColorLiteral
		{
			$current = $this_ColorLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpression3Access().getDistanceLiteralParserRuleCall_3());
		}
		this_DistanceLiteral_3=ruleDistanceLiteral
		{
			$current = $this_DistanceLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionBracket
entryRuleExpressionBracket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionBracketRule()); }
	iv_ruleExpressionBracket=ruleExpressionBracket
	{ $current=$iv_ruleExpressionBracket.current; }
	EOF;

// Rule ExpressionBracket
ruleExpressionBracket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionBracketAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionBracketAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionBracketRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"robot.DSL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionBracketAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleTouchLiteral
entryRuleTouchLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTouchLiteralRule()); }
	iv_ruleTouchLiteral=ruleTouchLiteral
	{ $current=$iv_ruleTouchLiteral.current; }
	EOF;

// Rule TouchLiteral
ruleTouchLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='touch:'
		{
			newLeafNode(otherlv_0, grammarAccess.getTouchLiteralAccess().getTouchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTouchLiteralAccess().getTouchTouchEnumEnumRuleCall_1_0());
				}
				lv_touch_1_0=ruleTouchEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTouchLiteralRule());
					}
					set(
						$current,
						"touch",
						lv_touch_1_0,
						"robot.DSL.TouchEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColorLiteral
entryRuleColorLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColorLiteralRule()); }
	iv_ruleColorLiteral=ruleColorLiteral
	{ $current=$iv_ruleColorLiteral.current; }
	EOF;

// Rule ColorLiteral
ruleColorLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='color:'
		{
			newLeafNode(otherlv_0, grammarAccess.getColorLiteralAccess().getColorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColorLiteralAccess().getColorColorEnumEnumRuleCall_1_0());
				}
				lv_color_1_0=ruleColorEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColorLiteralRule());
					}
					set(
						$current,
						"color",
						lv_color_1_0,
						"robot.DSL.ColorEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDistanceLiteral
entryRuleDistanceLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDistanceLiteralRule()); }
	iv_ruleDistanceLiteral=ruleDistanceLiteral
	{ $current=$iv_ruleDistanceLiteral.current; }
	EOF;

// Rule DistanceLiteral
ruleDistanceLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sonar:'
		{
			newLeafNode(otherlv_0, grammarAccess.getDistanceLiteralAccess().getSonarKeyword_0());
		}
		(
			(
				lv_distance_1_0=RULE_INT
				{
					newLeafNode(lv_distance_1_0, grammarAccess.getDistanceLiteralAccess().getDistanceINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDistanceLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule RotateEnum
ruleRotateEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='forward'
			{
				$current = grammarAccess.getRotateEnumAccess().getFORWARDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRotateEnumAccess().getFORWARDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='backward'
			{
				$current = grammarAccess.getRotateEnumAccess().getBACKWARDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRotateEnumAccess().getBACKWARDEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ActionEnum
ruleActionEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='forward'
			{
				$current = grammarAccess.getActionEnumAccess().getFORWARDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionEnumAccess().getFORWARDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='backward'
			{
				$current = grammarAccess.getActionEnumAccess().getBACKWARDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionEnumAccess().getBACKWARDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='stop'
			{
				$current = grammarAccess.getActionEnumAccess().getSTOPEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionEnumAccess().getSTOPEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule TouchEnum
ruleTouchEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='touchLeft'
			{
				$current = grammarAccess.getTouchEnumAccess().getLEFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTouchEnumAccess().getLEFTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='touchRight'
			{
				$current = grammarAccess.getTouchEnumAccess().getRIGHTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTouchEnumAccess().getRIGHTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ColorEnum
ruleColorEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NONE'
			{
				$current = grammarAccess.getColorEnumAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorEnumAccess().getNONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='BLACK'
			{
				$current = grammarAccess.getColorEnumAccess().getBLACKEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorEnumAccess().getBLACKEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='BLUE'
			{
				$current = grammarAccess.getColorEnumAccess().getBLUEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getColorEnumAccess().getBLUEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='GREEN'
			{
				$current = grammarAccess.getColorEnumAccess().getGREENEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getColorEnumAccess().getGREENEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='YELLOW'
			{
				$current = grammarAccess.getColorEnumAccess().getYELLOWEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getColorEnumAccess().getYELLOWEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='RED'
			{
				$current = grammarAccess.getColorEnumAccess().getREDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getColorEnumAccess().getREDEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='WHITE'
			{
				$current = grammarAccess.getColorEnumAccess().getWHITEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getColorEnumAccess().getWHITEEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='BROWN'
			{
				$current = grammarAccess.getColorEnumAccess().getBROWNEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getColorEnumAccess().getBROWNEnumLiteralDeclaration_7());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
