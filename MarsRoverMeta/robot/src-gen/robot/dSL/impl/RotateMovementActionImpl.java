/**
 * generated by Xtext 2.10.0
 */
package robot.dSL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import robot.dSL.DSLPackage;
import robot.dSL.RotateEnum;
import robot.dSL.RotateMovementAction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rotate Movement Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robot.dSL.impl.RotateMovementActionImpl#getRotateleft <em>Rotateleft</em>}</li>
 *   <li>{@link robot.dSL.impl.RotateMovementActionImpl#getLeftdir <em>Leftdir</em>}</li>
 *   <li>{@link robot.dSL.impl.RotateMovementActionImpl#getRotateright <em>Rotateright</em>}</li>
 *   <li>{@link robot.dSL.impl.RotateMovementActionImpl#getRightdir <em>Rightdir</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RotateMovementActionImpl extends ActionsImpl implements RotateMovementAction
{
  /**
   * The default value of the '{@link #getRotateleft() <em>Rotateleft</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotateleft()
   * @generated
   * @ordered
   */
  protected static final int ROTATELEFT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRotateleft() <em>Rotateleft</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotateleft()
   * @generated
   * @ordered
   */
  protected int rotateleft = ROTATELEFT_EDEFAULT;

  /**
   * The default value of the '{@link #getLeftdir() <em>Leftdir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftdir()
   * @generated
   * @ordered
   */
  protected static final RotateEnum LEFTDIR_EDEFAULT = RotateEnum.FORWARD;

  /**
   * The cached value of the '{@link #getLeftdir() <em>Leftdir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftdir()
   * @generated
   * @ordered
   */
  protected RotateEnum leftdir = LEFTDIR_EDEFAULT;

  /**
   * The default value of the '{@link #getRotateright() <em>Rotateright</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotateright()
   * @generated
   * @ordered
   */
  protected static final int ROTATERIGHT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRotateright() <em>Rotateright</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotateright()
   * @generated
   * @ordered
   */
  protected int rotateright = ROTATERIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #getRightdir() <em>Rightdir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightdir()
   * @generated
   * @ordered
   */
  protected static final RotateEnum RIGHTDIR_EDEFAULT = RotateEnum.FORWARD;

  /**
   * The cached value of the '{@link #getRightdir() <em>Rightdir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightdir()
   * @generated
   * @ordered
   */
  protected RotateEnum rightdir = RIGHTDIR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RotateMovementActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.ROTATE_MOVEMENT_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getRotateleft()
  {
    return rotateleft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRotateleft(int newRotateleft)
  {
    int oldRotateleft = rotateleft;
    rotateleft = newRotateleft;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATELEFT, oldRotateleft, rotateleft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RotateEnum getLeftdir()
  {
    return leftdir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftdir(RotateEnum newLeftdir)
  {
    RotateEnum oldLeftdir = leftdir;
    leftdir = newLeftdir == null ? LEFTDIR_EDEFAULT : newLeftdir;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.ROTATE_MOVEMENT_ACTION__LEFTDIR, oldLeftdir, leftdir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getRotateright()
  {
    return rotateright;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRotateright(int newRotateright)
  {
    int oldRotateright = rotateright;
    rotateright = newRotateright;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATERIGHT, oldRotateright, rotateright));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RotateEnum getRightdir()
  {
    return rightdir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightdir(RotateEnum newRightdir)
  {
    RotateEnum oldRightdir = rightdir;
    rightdir = newRightdir == null ? RIGHTDIR_EDEFAULT : newRightdir;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.ROTATE_MOVEMENT_ACTION__RIGHTDIR, oldRightdir, rightdir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATELEFT:
        return getRotateleft();
      case DSLPackage.ROTATE_MOVEMENT_ACTION__LEFTDIR:
        return getLeftdir();
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATERIGHT:
        return getRotateright();
      case DSLPackage.ROTATE_MOVEMENT_ACTION__RIGHTDIR:
        return getRightdir();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATELEFT:
        setRotateleft((Integer)newValue);
        return;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__LEFTDIR:
        setLeftdir((RotateEnum)newValue);
        return;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATERIGHT:
        setRotateright((Integer)newValue);
        return;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__RIGHTDIR:
        setRightdir((RotateEnum)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATELEFT:
        setRotateleft(ROTATELEFT_EDEFAULT);
        return;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__LEFTDIR:
        setLeftdir(LEFTDIR_EDEFAULT);
        return;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATERIGHT:
        setRotateright(ROTATERIGHT_EDEFAULT);
        return;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__RIGHTDIR:
        setRightdir(RIGHTDIR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATELEFT:
        return rotateleft != ROTATELEFT_EDEFAULT;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__LEFTDIR:
        return leftdir != LEFTDIR_EDEFAULT;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__ROTATERIGHT:
        return rotateright != ROTATERIGHT_EDEFAULT;
      case DSLPackage.ROTATE_MOVEMENT_ACTION__RIGHTDIR:
        return rightdir != RIGHTDIR_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (rotateleft: ");
    result.append(rotateleft);
    result.append(", leftdir: ");
    result.append(leftdir);
    result.append(", rotateright: ");
    result.append(rotateright);
    result.append(", rightdir: ");
    result.append(rightdir);
    result.append(')');
    return result.toString();
  }

} //RotateMovementActionImpl
