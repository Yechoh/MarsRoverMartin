/*
 /*
 * generated by Xtext 2.10.0
 */
package robot.generator

import java.util.ArrayList
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import robot.dSL.Behaviors
import robot.dSL.RobotBehavior

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator extends AbstractGenerator {

		override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val root = resource.allContents.head as RobotBehavior;
 		if (root != null) {
 			fsa.generateFile("/Master/Main.java", MainGenerator.toText(root));
 			fsa.generateFile("/Master/Model.java", ModelGenerator.toText(root));
 			fsa.generateFile("/Slave/Main.java", SlaveGenerator.MainToText(root));
 			fsa.generateFile("/Slave/Model.java", SlaveGenerator.ModelToText(root));
 			fsa.generateFile("/Slave/GetMessage.java", SlaveGenerator.GetMesageToText(root));
 			fsa.generateFile("/Slave/ReadSensors.java", SlaveGenerator.ReadSensorsToText(root));
 			var List<Behaviors> b = new ArrayList<Behaviors>() 
 			b = Auxiliary.getBehaviors(root);
 			for(Behaviors i : b)
 				fsa.generateFile("/Master/"+Auxiliary.toClass(i.name) + ".java", BehaviorGenerator.toText(i));
 			}
	}
}